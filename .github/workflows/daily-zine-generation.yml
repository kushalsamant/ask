name: Daily Zine Generation

on:
  schedule:
    # Run daily at 9:00 AM IST (3:30 AM UTC)
    - cron: '30 3 * * *'
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.12'
  IMAGE_GENERATION_TIMEOUT: 3600  # 1 hour timeout
  MAX_RETRIES: 3

jobs:
  generate-daily-zine:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hour job timeout (increased from 2 hours)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create environment file
      run: |
        cp ask.env.template ask.env
        echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}" >> ask.env
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> ask.env
        echo "REPLICATE_API_KEY=${{ secrets.REPLICATE_API_KEY }}" >> ask.env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> ask.env
        echo "TEXT_PROVIDER=${{ secrets.TEXT_PROVIDER || 'together' }}" >> ask.env
        echo "TEXT_MODEL=${{ secrets.TEXT_MODEL || 'meta-llama/Llama-3.3-70B-Instruct-Turbo-Free' }}" >> ask.env
        echo "IMAGE_PROVIDER=${{ secrets.IMAGE_PROVIDER || 'together' }}" >> ask.env
        echo "IMAGE_MODEL=${{ secrets.IMAGE_MODEL || 'stabilityai/stable-diffusion-xl-base-1.0' }}" >> ask.env
        
    - name: Create necessary directories
      run: |
        mkdir -p images logs daily_pdfs scraped_content captions instagram
        
    - name: Test basic functionality
      id: test-basic
      run: |
        echo "🧪 Testing basic functionality..."
        python daily_zine_generator.py --list-styles
        if [ $? -eq 0 ]; then
          echo "✅ Basic test passed"
          echo "basic_test=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Basic test failed"
          echo "basic_test=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Generate daily zine (Free Tier Optimized)
      id: generate-zine
      if: steps.test-basic.outputs.basic_test == 'passed'
      run: |
        echo "🚀 Starting daily zine generation at $(date)"
        echo "📅 Date: $(date '+%Y-%m-%d')"
        echo "⏰ Time: $(date '+%H:%M:%S %Z')"
        echo "💰 Free Tier Optimized: ~100 requests/minute limit"
        
        # Run with conservative settings for GitHub Actions
        python daily_zine_generator.py --debug --images 10 --theme "GitHub Action Daily"
        
        if [ $? -eq 0 ]; then
          echo "✅ Generation completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Generation failed"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Upload generated artifacts
      if: steps.generate-zine.outputs.success == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: daily-zine-${{ github.run_number }}
        path: |
          daily_pdfs/*.pdf
          images/
          logs/
          captions/
        retention-days: 30
        
    - name: Commit and push generated content
      if: steps.generate-zine.outputs.success == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated files
        git add daily_pdfs/*.pdf images/ logs/ captions/ || true
        
        # Commit with timestamp
        git commit -m "🤖 Daily zine generation - $(date '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
        
        # Push to repository
        git push origin main || echo "Push failed (might be protected branch)"
        
    - name: Notify success
      if: steps.generate-zine.outputs.success == 'true'
      run: |
        echo "🎉 Daily zine generation completed successfully!"
        echo "📊 Summary:"
        echo "  - Generated: $(ls daily_pdfs/*.pdf 2>/dev/null | wc -l) PDF files"
        echo "  - Images: $(find images/ -name '*.jpg' 2>/dev/null | wc -l) images"
        echo "  - Logs: $(ls logs/ 2>/dev/null | wc -l) log files"
        echo "  - Captions: $(ls captions/ 2>/dev/null | wc -l) caption files"
        
    - name: Notify failure
      if: failure()
      run: |
        echo "❌ Daily zine generation failed!"
        echo "📋 Debug information:"
        echo "  - Python version: $(python --version)"
        echo "  - Working directory: $(pwd)"
        echo "  - Files in directory: $(ls -la)"
        echo "  - Environment file exists: $(test -f ask.env && echo 'Yes' || echo 'No')"
        echo "  - Recent logs:"
        tail -n 50 logs/*.log 2>/dev/null || echo "No logs found"
        echo "  - Requirements:"
        cat requirements.txt || echo "No requirements.txt found"
        
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up temporary files..."
        rm -f ask.env
        echo "✅ Cleanup completed" 